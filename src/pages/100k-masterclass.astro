---
import Layout from "../layouts/Layout.astro";
---

<Layout
    title="Webinaire Exclusif - Comment j'ai fait +100k‚Ç¨ en 1 mois | Syst√®me Viral"
    description="D√©couvrez la m√©thode exacte pour g√©n√©rer +100k‚Ç¨ en 1 mois avec des vid√©os d'1 minute. Webinaire gratuit avec chat en direct."
    canonical="/100k-masterclass"
>
    <!-- Background effects -->
    <div class="gradient-bg"></div>

    <!-- Page Title -->
    <section class="page-title-section">
        <div class="container">
            <div class="title-badge">
                <span class="badge-dot"></span>
                <span>Session Exclusive</span>
            </div>
            <h1 class="page-title">
                Les <span class="title-highlight">3 secrets</span> pour cr√©er ton
                audience, obtenir tes premiers emails et g√©n√©rer des
                <span class="title-highlight">revenus passifs</span>.
            </h1>
            <p class="title-subtitle">
                Une masterclass d'exception pour transformer ta passion en
                revenus r√©currents.
            </p>
        </div>
    </section>

    <!-- Main Content -->
    <div class="main-container">
        <!-- Left Column: Video + Info -->
        <div class="video-section">
            <!-- Viewers badge (mobile - au-dessus de la vid√©o, en dehors) -->
            <div
                class="viewers-badge viewers-badge-mobile"
                id="viewersBadgeMobile"
            >
                <div class="live-dot-small"></div>
                <span id="viewersCountMobile">72</span>
                <span class="viewers-text">personnes regardent</span>
            </div>

            <div class="video-wrapper">
                <video
                    id="masterclass-video"
                    playsinline
                    preload="metadata"
                    poster="/media/thumbnail-video-presentation.webp"
                    disablepictureinpicture
                >
                    <source
                        src="https://sonnycourt-videos-public.b-cdn.net/VSL-Systeme-Viral-VF.mp4"
                        type="video/mp4"
                    />
                    Votre navigateur ne supporte pas la lecture vid√©o.
                </video>
                <button class="big-play" id="bigPlay" aria-label="Lecture">
                    <svg
                        width="44"
                        height="44"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path d="M5 3v18l15-9L5 3z" fill="currentColor"></path>
                    </svg>
                </button>
                <div
                    class="custom-controls"
                    id="playerControls"
                    role="group"
                    aria-label="Contr√¥les vid√©o"
                >
                    <button
                        class="control-btn play"
                        id="playPause"
                        aria-label="Lecture/Pause"
                    >
                        <svg
                            class="icon-play"
                            width="18"
                            height="18"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path d="M5 3v18l15-9L5 3z" fill="currentColor"
                            ></path>
                        </svg>
                        <svg
                            class="icon-pause"
                            width="18"
                            height="18"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                d="M6 4h4v16H6zM14 4h4v16h-4z"
                                fill="currentColor"></path>
                        </svg>
                    </button>

                    <button
                        class="control-btn fullscreen"
                        id="fullscreenBtn"
                        aria-label="Plein √©cran"
                    >
                        <svg
                            class="icon-fullscreen"
                            width="18"
                            height="18"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"></path>
                        </svg>
                        <svg
                            class="icon-exit-fullscreen"
                            width="18"
                            height="18"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                d="M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"></path>
                        </svg>
                    </button>
                </div>
                <div class="reactions-overlay" id="reactionsOverlay"></div>

                <!-- Viewers badge (desktop - position absolue) -->
                <div
                    class="viewers-badge viewers-badge-desktop"
                    id="viewersBadge"
                >
                    <div class="live-dot-small"></div>
                    <span id="viewersCount">72</span>
                    <span class="viewers-text">personnes regardent</span>
                </div>
            </div>

            <div class="video-info">
                <div class="video-chapters">
                    <div class="chapter active" data-time="0" data-chapter="0">
                        Intro
                    </div>
                    <div class="chapter" data-time="39" data-chapter="1">
                        Mon exp√©rience
                    </div>
                    <div class="chapter" data-time="138" data-chapter="2">
                        La preuve
                    </div>
                    <div class="chapter" data-time="322" data-chapter="3">
                        Secret #1
                    </div>
                    <div class="chapter" data-time="502" data-chapter="4">
                        Secret #2
                    </div>
                    <div class="chapter" data-time="712" data-chapter="5">
                        Secret #3
                    </div>
                    <div class="chapter" data-time="1011" data-chapter="6">
                        La solution
                    </div>
                </div>
            </div>
        </div>

        <!-- Timer Button -->
        <div class="timer-section">
            <button class="timer-button disabled" id="timerButton" disabled>
                <div class="timer-glow"></div>
                <div class="timer-content">
                    <div class="timer-top">
                        <span class="timer-label" id="timerLabel"
                            >ACC√àS LIMIT√â</span
                        >
                    </div>
                    <div class="timer-display">
                        <span class="timer-countdown" id="timerCountdown"
                            >12:00</span
                        >
                    </div>
                    <div class="timer-cta" id="timerCTA">
                        <span>D√©bloquer l'acc√®s</span>
                        <svg
                            width="20"
                            height="20"
                            viewBox="0 0 20 20"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                d="M7.5 15L12.5 10L7.5 5"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"></path>
                        </svg>
                    </div>
                </div>
            </button>
        </div>
    </div>

    <!-- CTA Popup -->
    <div class="cta-popup" id="ctaPopup">
        <span class="cta-text">üéÅ T√©l√©chargez le guide PDF gratuit</span>
        <button class="cta-button" onclick="handleCTA()">T√âL√âCHARGER</button>
        <button class="cta-close" onclick="closeCTA()">√ó</button>
    </div>
</Layout>

<style>
    /* Variables CSS adapt√©es au branding Syst√®me Viral */
    :root {
        --bg: #0a0a0a;
        --bg-card: rgba(255, 255, 255, 0.02);
        --bg-elevated: rgba(255, 255, 255, 0.05);
        --text: #ffffff;
        --text-secondary: #aaa;
        --text-muted: #888;
        --accent: #00dc82;
        --accent-bright: #00f593;
        --accent-glow: #00dc82;
        --accent-dark: #00b86b;
        --success: #00dc82;
        --border: rgba(255, 255, 255, 0.1);
        --glow: rgba(0, 220, 130, 0.3);
        --danger: #ef4444;
    }

    /* Background effects */
    .gradient-bg {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: #0a0a0a;
        z-index: -1;
    }

    /* Page Title Section */
    .page-title-section {
        background: var(--bg);
        padding: 80px 0 32px;
        text-align: center;
        position: relative;
        overflow: hidden;
    }

    .page-title-section::before {
        content: "";
        position: absolute;
        top: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        height: 400px;
        background: radial-gradient(
            circle,
            rgba(0, 220, 130, 0.1) 0%,
            transparent 70%
        );
        pointer-events: none;
        animation: titleGlow 8s ease-in-out infinite;
    }

    @keyframes titleGlow {
        0%,
        100% {
            opacity: 0.3;
            transform: translateX(-50%) scale(1);
        }
        50% {
            opacity: 0.6;
            transform: translateX(-50%) scale(1.2);
        }
    }

    .title-badge {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 8px 20px;
        background: rgba(0, 220, 130, 0.1);
        border: 1px solid rgba(0, 220, 130, 0.3);
        border-radius: 100px;
        margin-bottom: 32px;
        font-size: 13px;
        font-weight: 600;
        color: var(--accent-bright);
        text-transform: uppercase;
        letter-spacing: 0.5px;
        animation: fadeInDown 0.6s ease;
    }

    .badge-dot {
        width: 8px;
        height: 8px;
        background: var(--accent);
        border-radius: 50%;
        animation: pulse 2s ease infinite;
        box-shadow: 0 0 10px var(--accent);
    }

    @keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .page-title {
        font-size: clamp(28px, 5vw, 48px);
        font-weight: 900;
        line-height: 1.2;
        color: var(--text);
        max-width: 900px;
        margin: 0 auto 24px;
        letter-spacing: -0.02em;
        position: relative;
        z-index: 1;
        animation: fadeInUp 0.8s ease 0.2s both;
        text-shadow: 0 2px 20px rgba(0, 220, 130, 0.2);
    }

    .title-highlight {
        background: linear-gradient(
            135deg,
            var(--accent) 0%,
            var(--accent-bright) 100%
        );
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        position: relative;
        font-weight: 900;
        display: inline-block;
    }

    .title-subtitle {
        font-size: 18px;
        color: var(--text-secondary);
        max-width: 600px;
        margin: 0 auto;
        line-height: 1.6;
        animation: fadeInUp 1s ease 0.4s both;
        position: relative;
        z-index: 1;
    }

    @media (max-width: 768px) {
        .page-title {
            font-size: 24px;
            padding: 0 16px;
            margin-bottom: 16px;
        }

        .page-title-section {
            padding: 60px 0 32px;
        }

        .title-badge {
            font-size: 11px;
            padding: 6px 16px;
            margin-bottom: 24px;
        }

        .title-subtitle {
            font-size: 16px;
            padding: 0 16px;
        }
    }

    .live-dot {
        width: 8px;
        height: 8px;
        background: var(--accent);
        border-radius: 50%;
        animation: pulse 2s ease infinite;
    }

    @keyframes pulse {
        0%,
        100% {
            opacity: 1;
            box-shadow: 0 0 0 0 var(--accent);
        }
        50% {
            opacity: 0.7;
            box-shadow: 0 0 0 8px rgba(16, 185, 129, 0);
        }
    }

    /* Main Layout */
    .main-container {
        max-width: 1400px;
        margin: 40px auto 0;
        padding: 24px;
        display: grid;
        grid-template-columns: 1fr;
        grid-template-areas:
            "video"
            "timer";
        gap: 24px;
        align-items: start;
    }

    /* Video Section */
    .video-section {
        grid-area: video;
        display: flex;
        flex-direction: column;
        gap: 20px;
        align-items: stretch;
    }

    .video-wrapper {
        background: var(--bg-card);
        border: 1px solid var(--border);
        border-radius: 16px;
        overflow: hidden;
        position: relative;
        width: 100%;
        aspect-ratio: 16/9;
    }

    .video-wrapper iframe {
        width: 100%;
        height: 100%;
        border: none;
    }

    .video-wrapper video {
        width: 100%;
        height: 100%;
        display: block;
        background: #000;
    }

    /* Viewers badge */
    .viewers-badge {
        background: rgba(0, 0, 0, 0.75);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(0, 220, 130, 0.3);
        border-radius: 100px;
        padding: 8px 16px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 13px;
        color: #ffffff;
        z-index: 10;
        box-shadow: 0 4px 20px rgba(0, 220, 130, 0.2);
    }

    /* Badge desktop - position absolue sur la vid√©o */
    .viewers-badge-desktop {
        position: absolute;
        top: 16px;
        right: 16px;
    }

    /* Badge mobile - masqu√© par d√©faut sur desktop */
    .viewers-badge-mobile {
        display: none;
    }

    .live-dot-small {
        width: 8px;
        height: 8px;
        background: var(--accent);
        border-radius: 50%;
        animation: pulse 2s ease infinite;
        box-shadow: 0 0 10px rgba(0, 220, 130, 0.8);
    }

    #viewersCount {
        font-weight: 700;
        color: var(--accent-bright);
        font-size: 14px;
        transition: all 0.3s ease;
    }

    .viewers-text {
        font-size: 12px;
        color: rgba(255, 255, 255, 0.9);
    }

    .big-play {
        position: absolute;
        inset: 0;
        margin: auto;
        width: 72px;
        height: 72px;
        border-radius: 50%;
        background: radial-gradient(
            closest-side,
            var(--accent),
            var(--accent-dark)
        );
        color: #0a0a0a;
        display: grid;
        place-items: center;
        border: 1px solid var(--border);
        box-shadow:
            0 0 0 6px rgba(0, 220, 130, 0.15),
            0 10px 30px rgba(0, 0, 0, 0.4);
        cursor: pointer;
        transition:
            transform 0.15s ease,
            box-shadow 0.15s ease;
        z-index: 5;
    }
    .big-play:hover {
        transform: scale(1.04);
        box-shadow:
            0 0 0 8px rgba(0, 220, 130, 0.18),
            0 12px 36px rgba(0, 0, 0, 0.45);
    }
    .big-play.hidden {
        display: none;
    }
    .big-play svg {
        /* slight optical centering to the right */
        transform: translateX(1px);
        pointer-events: none;
    }

    .custom-controls {
        position: absolute;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 10px;
        padding: 10px 12px;
        background: linear-gradient(
            to top,
            rgba(10, 10, 10, 0.9),
            rgba(10, 10, 10, 0.3) 60%,
            rgba(10, 10, 10, 0)
        );
        /* Remove hairline between video and controls */
        border-top: none;
        z-index: 6;
    }
    .control-btn {
        color: var(--text);
        background: transparent;
        border: 1px solid var(--border);
        border-radius: 8px;
        padding: 8px;
        display: grid;
        place-items: center;
        cursor: pointer;
    }
    .control-btn:hover {
        color: var(--accent);
        border-color: rgba(0, 220, 130, 0.4);
    }
    .control-btn .icon-pause {
        display: none;
    }
    .is-playing .control-btn.play .icon-play {
        display: none;
    }
    .is-playing .control-btn.play .icon-pause {
        display: block;
    }

    /* Fullscreen icons */
    .control-btn .icon-exit-fullscreen {
        display: none;
    }
    .is-fullscreen .control-btn.fullscreen .icon-fullscreen {
        display: none;
    }
    .is-fullscreen .control-btn.fullscreen .icon-exit-fullscreen {
        display: block;
    }
    .mute-active .control-btn.mute .icon-volume {
        display: none;
    }
    .mute-active .control-btn.mute .icon-muted {
        display: block;
    }

    /* Progress/time removed to prevent scrubbing */

    @media (max-width: 768px) {
        .custom-controls {
            gap: 8px;
            padding: 8px;
        }
    }

    /* Reactions overlay */
    .reactions-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        pointer-events: none;
        z-index: 10;
    }

    .floating-reaction {
        position: absolute;
        font-size: 24px;
        animation: floatUp 3s ease-out forwards;
        pointer-events: none;
    }

    @keyframes floatUp {
        0% {
            opacity: 0;
            transform: translateY(0) scale(0);
        }
        20% {
            opacity: 1;
            transform: translateY(-20px) scale(1);
        }
        100% {
            opacity: 0;
            transform: translateY(-100px) scale(0.5);
        }
    }

    /* Video Info */
    .video-info {
        background: var(--bg-card);
        border: 1px solid var(--border);
        border-radius: 12px;
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .video-title {
        font-size: 20px;
        font-weight: 700;
        margin-bottom: 20px;
        letter-spacing: -0.5px;
        color: var(--text);
    }

    /* Timer Section */
    .timer-section {
        grid-area: timer;
        width: 100%;
        margin-bottom: 80px;
    }

    .timer-button {
        width: 100%;
        background: linear-gradient(
            135deg,
            rgba(0, 220, 130, 0.03) 0%,
            rgba(0, 220, 130, 0.08) 50%,
            rgba(0, 220, 130, 0.03) 100%
        );
        border: 2px solid rgba(0, 220, 130, 0.3);
        border-radius: 24px;
        padding: 32px 40px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        backdrop-filter: blur(20px);
        box-shadow: 0 8px 32px rgba(0, 220, 130, 0.15);
    }

    .timer-glow {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 200%;
        height: 200%;
        background: radial-gradient(
            circle,
            rgba(0, 220, 130, 0.15) 0%,
            transparent 70%
        );
        animation: glowPulse 3s ease-in-out infinite;
        pointer-events: none;
    }

    @keyframes glowPulse {
        0%,
        100% {
            opacity: 0.5;
            transform: translate(-50%, -50%) scale(1);
        }
        50% {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1.1);
        }
    }

    .timer-content {
        position: relative;
        z-index: 1;
        text-align: center;
        width: 100%;
    }

    .timer-top {
        margin-bottom: 12px;
    }

    .timer-label {
        font-size: 13px;
        font-weight: 800;
        color: var(--text-secondary);
        text-transform: uppercase;
        letter-spacing: 3px;
        transition: all 0.3s ease;
        display: inline-block;
    }

    .timer-display {
        margin-bottom: 20px;
    }

    .timer-countdown {
        font-size: 56px;
        font-weight: 900;
        font-family: "SF Mono", "Monaco", "Courier New", monospace;
        color: #fff;
        letter-spacing: 4px;
        transition: all 0.3s ease;
        text-shadow: 0 0 40px rgba(0, 220, 130, 0.5);
        display: block;
        line-height: 1;
    }

    /* Style affin√© pour l'√©tat d√©bloqu√© (plus en phase avec le branding) */
    .timer-button.unlocked .timer-countdown {
        font-family: inherit; /* revenir √† la typo principale du site */
        font-weight: 800;
        /* taille responsive pour √©viter le d√©passement */
        font-size: clamp(28px, 6vw, 44px);
        letter-spacing: 1px;
        background: linear-gradient(
            135deg,
            var(--accent) 0%,
            var(--accent-bright) 100%
        );
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-fill-color: transparent;
        color: transparent;
        text-shadow: 0 0 24px rgba(0, 220, 130, 0.45);
        white-space: nowrap;
        overflow: hidden;
    }

    .timer-button.unlocked .timer-label {
        color: var(--accent-bright);
        opacity: 0.95;
    }

    .timer-cta {
        display: inline-flex;
        align-items: center;
        gap: 12px;
        padding: 16px 32px;
        background: linear-gradient(
            135deg,
            var(--accent) 0%,
            var(--accent-bright) 100%
        );
        color: #000;
        border-radius: 100px;
        font-size: 16px;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 1px;
        transition: all 0.3s ease;
        box-shadow: 0 4px 20px rgba(0, 220, 130, 0.3);
    }

    .timer-cta svg {
        transition: all 0.3s ease;
    }

    /* Hover states - actif seulement */
    .timer-button:not(.disabled):hover {
        transform: translateY(-8px);
        border-color: var(--accent-bright);
        background: linear-gradient(
            135deg,
            rgba(0, 220, 130, 0.08) 0%,
            rgba(0, 220, 130, 0.15) 50%,
            rgba(0, 220, 130, 0.08) 100%
        );
        box-shadow: 0 20px 60px rgba(0, 220, 130, 0.4);
    }

    .timer-button:not(.disabled):hover .timer-countdown {
        text-shadow: 0 0 60px rgba(0, 220, 130, 0.8);
    }

    .timer-button:not(.disabled):hover .timer-cta {
        background: linear-gradient(
            135deg,
            var(--accent-bright) 0%,
            var(--accent-glow) 100%
        );
        box-shadow: 0 8px 32px rgba(0, 220, 130, 0.5);
        transform: scale(1.05);
    }

    .timer-button:not(.disabled):hover .timer-cta svg {
        transform: translateX(4px);
    }

    .timer-button:not(.disabled):active {
        transform: translateY(-4px) scale(0.98);
    }

    /* √âtat d√©sactiv√© - Plus visible */
    .timer-button.disabled {
        cursor: not-allowed;
        background: linear-gradient(
            135deg,
            rgba(255, 255, 255, 0.03) 0%,
            rgba(255, 255, 255, 0.06) 50%,
            rgba(255, 255, 255, 0.03) 100%
        );
        border: 2px solid rgba(255, 255, 255, 0.15);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    }

    .timer-button.disabled .timer-glow {
        display: none;
    }

    .timer-button.disabled .timer-countdown {
        color: rgba(255, 255, 255, 0.7);
        text-shadow: none;
        font-size: 36px;
    }

    .timer-button.disabled .timer-label {
        color: rgba(255, 255, 255, 0.6);
    }

    .timer-button.disabled .timer-cta {
        opacity: 0.5;
        background: rgba(255, 255, 255, 0.08);
        color: rgba(255, 255, 255, 0.5);
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: none;
    }

    .video-chapters {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
        justify-content: center;
        width: 100%;
    }

    .chapter {
        padding: 8px 16px 12px;
        background: var(--bg-elevated);
        border: 1px solid var(--border);
        border-radius: 10px;
        font-size: 13px;
        color: var(--text-secondary);
        cursor: pointer;
        transition: all 0.4s ease;
        position: relative;
        overflow: hidden;
        font-weight: 500;
    }

    .chapter::before {
        content: "";
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        width: 0%;
        background: linear-gradient(
            90deg,
            rgba(0, 220, 130, 0.15) 0%,
            rgba(0, 220, 130, 0.08) 100%
        );
        transition: width 0.3s ease;
        z-index: -1;
    }

    /* Barre de progression en bas du chapitre actif */
    .chapter::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        height: 3px;
        width: 0%;
        background: linear-gradient(
            90deg,
            var(--accent) 0%,
            var(--accent-bright) 100%
        );
        box-shadow: 0 0 10px rgba(0, 220, 130, 0.6);
        transition: none;
        opacity: 0;
    }

    .chapter:hover {
        border-color: var(--accent);
        color: var(--accent);
        transform: translateY(-2px);
    }

    .chapter.active {
        background: rgba(0, 220, 130, 0.15);
        border-color: var(--accent);
        color: var(--accent-bright);
        box-shadow: 0 0 20px rgba(0, 220, 130, 0.3);
        font-weight: 600;
    }

    .chapter.active::before {
        width: 100%;
        animation: shimmer 2s ease-in-out infinite;
    }

    .chapter.active::after {
        opacity: 1;
        width: var(--chapter-progress, 0%);
    }

    @keyframes shimmer {
        0%,
        100% {
            opacity: 1;
        }
        50% {
            opacity: 0.5;
        }
    }

    .chapter.completed {
        background: rgba(0, 220, 130, 0.05);
        border-color: rgba(0, 220, 130, 0.3);
        color: var(--accent);
    }

    .chapter.completed::after {
        opacity: 0 !important;
        width: 0 !important;
    }

    /* Chat removed */

    /* CTA Popup */
    .cta-popup {
        position: fixed;
        bottom: 24px;
        left: 50%;
        transform: translateX(-50%) translateY(200px);
        background: linear-gradient(
            135deg,
            var(--accent) 0%,
            var(--accent-dark) 100%
        );
        padding: 16px 24px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        gap: 16px;
        box-shadow: 0 10px 40px rgba(16, 185, 129, 0.4);
        z-index: 200;
        transition: transform 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    }

    .cta-popup.show {
        transform: translateX(-50%) translateY(0);
    }

    .cta-text {
        color: var(--bg);
        font-weight: 600;
        font-size: 14px;
    }

    .cta-button {
        padding: 8px 16px;
        background: var(--bg);
        color: var(--accent);
        border: none;
        border-radius: 8px;
        font-weight: 700;
        cursor: pointer;
        text-transform: uppercase;
        font-size: 12px;
        letter-spacing: 0.5px;
    }

    .cta-close {
        width: 24px;
        height: 24px;
        background: rgba(0, 0, 0, 0.2);
        border: none;
        border-radius: 50%;
        color: var(--bg);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Responsive */
    /* Tablette et desktop moyen (769px - 1024px) */
    @media (max-width: 1024px) {
        .main-container {
            grid-template-columns: 1fr;
            grid-template-areas:
                "video"
                "timer";
            gap: 24px;
        }
    }

    /* Mobile (‚â§768px) */
    @media (max-width: 768px) {
        .main-container {
            padding: 16px;
            margin-top: 24px;
            grid-template-areas:
                "video"
                "timer";
            gap: 20px;
        }

        /* Viewers badge au-dessus de la vid√©o sur mobile - en dehors du video-wrapper */
        .viewers-badge-desktop {
            display: none;
        }

        .viewers-badge-mobile {
            display: flex;
            position: static;
            margin-bottom: 12px;
            width: fit-content;
            margin-left: auto;
            margin-right: auto;
            font-size: 10px;
            padding: 4px 10px;
            gap: 6px;
        }

        .live-dot-small {
            width: 6px;
            height: 6px;
        }

        .viewers-text {
            font-size: 10px;
        }

        #viewersCount,
        #viewersCountMobile {
            font-size: 12px;
        }

        .video-title {
            font-size: 18px;
        }

        .chapter {
            font-size: 12px;
            padding: 6px 12px 10px;
        }

        .timer-button {
            padding: 28px 24px;
        }

        .timer-label {
            font-size: 11px;
            letter-spacing: 2px;
        }

        .timer-countdown {
            font-size: 48px;
            letter-spacing: 4px;
        }

        .timer-display {
            margin-bottom: 20px;
        }

        .timer-cta {
            padding: 14px 28px;
            font-size: 14px;
        }

        .timer-cta svg {
            width: 18px;
            height: 18px;
        }
    }
</style>

<script>
    // Display initial messages on load
    window.addEventListener("DOMContentLoaded", () => {
        // Initialize timer
        initializeTimer();

        // Initialize progress bar
        initializeProgressBar();

        // Initialize viewers count
        initializeViewersCount();
    });

    // Viewers count functionality - progression sur 20 minutes jusqu'√† 179
    function initializeViewersCount() {
        const viewersCountElement = document.getElementById("viewersCount");
        const viewersCountMobileElement =
            document.getElementById("viewersCountMobile");

        // Fonction pour mettre √† jour les deux badges
        const updateBothBadges = (count: number) => {
            if (viewersCountElement) {
                viewersCountElement.textContent = count.toString();
            }
            if (viewersCountMobileElement) {
                viewersCountMobileElement.textContent = count.toString();
            }
        };

        if (!viewersCountElement && !viewersCountMobileElement) return;

        const startTime = Date.now();
        const duration = 20 * 60 * 1000; // 20 minutes en millisecondes
        const startCount = 72;
        const endCount = 179;
        const totalIncrease = endCount - startCount;

        // Valeur initiale
        let currentCount = startCount;
        updateBothBadges(currentCount);

        function updateViewersCount() {
            if (!viewersCountElement && !viewersCountMobileElement) return;

            const elapsed = Date.now() - startTime;
            const progress = Math.min(1, elapsed / duration); // Entre 0 et 1

            // Calculer la valeur cible bas√©e sur la progression
            const targetCount =
                startCount + Math.floor(totalIncrease * progress);

            // Ajouter une variation al√©atoire de -3 √† +3 pour rendre plus naturel
            const variation = Math.floor(Math.random() * 7) - 3; // -3 √† +3
            const newCount = Math.max(
                startCount,
                Math.min(endCount, targetCount + variation),
            );

            // Ne mettre √† jour que si le nombre a chang√©
            if (newCount !== currentCount) {
                currentCount = newCount;

                // Animation de changement pour les deux badges
                if (viewersCountElement) {
                    viewersCountElement.style.transform = "scale(1.1)";
                    viewersCountElement.style.opacity = "0.7";
                }
                if (viewersCountMobileElement) {
                    viewersCountMobileElement.style.transform = "scale(1.1)";
                    viewersCountMobileElement.style.opacity = "0.7";
                }

                setTimeout(() => {
                    updateBothBadges(newCount);

                    if (viewersCountElement) {
                        viewersCountElement.style.transform = "scale(1)";
                        viewersCountElement.style.opacity = "1";
                    }
                    if (viewersCountMobileElement) {
                        viewersCountMobileElement.style.transform = "scale(1)";
                        viewersCountMobileElement.style.opacity = "1";
                    }
                }, 150);
            }

            // Continuer √† mettre √† jour toutes les 3 √† 6 secondes pendant 20 minutes
            if (progress < 1) {
                const delay =
                    Math.floor(Math.random() * (6000 - 3000 + 1)) + 3000; // Entre 3 et 6 secondes
                setTimeout(() => {
                    updateViewersCount();
                }, delay);
            } else {
                // Apr√®s 20 minutes, continuer avec des variations al√©atoires autour de 179
                function continueAfterMax() {
                    if (!viewersCountElement && !viewersCountMobileElement)
                        return;
                    const delay =
                        Math.floor(Math.random() * (6000 - 3000 + 1)) + 3000;
                    const finalVariation = Math.floor(Math.random() * 7) - 3;
                    const finalCount = Math.max(
                        176, // L√©g√®rement en dessous de 179
                        Math.min(endCount, endCount + finalVariation),
                    );

                    if (finalCount !== currentCount) {
                        currentCount = finalCount;

                        // Animation pour les deux badges
                        if (viewersCountElement) {
                            viewersCountElement.style.transform = "scale(1.1)";
                            viewersCountElement.style.opacity = "0.7";
                        }
                        if (viewersCountMobileElement) {
                            viewersCountMobileElement.style.transform =
                                "scale(1.1)";
                            viewersCountMobileElement.style.opacity = "0.7";
                        }

                        setTimeout(() => {
                            updateBothBadges(finalCount);

                            if (viewersCountElement) {
                                viewersCountElement.style.transform =
                                    "scale(1)";
                                viewersCountElement.style.opacity = "1";
                            }
                            if (viewersCountMobileElement) {
                                viewersCountMobileElement.style.transform =
                                    "scale(1)";
                                viewersCountMobileElement.style.opacity = "1";
                            }
                        }, 150);
                    }

                    // Continuer les variations
                    setTimeout(continueAfterMax, delay);
                }

                const delay =
                    Math.floor(Math.random() * (6000 - 3000 + 1)) + 3000;
                setTimeout(continueAfterMax, delay);
            }
        }

        // D√©marrer les mises √† jour apr√®s 2 secondes
        setTimeout(() => {
            updateViewersCount();
        }, 2000);
    }

    // Timer functionality - synchronis√© avec la vid√©o, d√©bloque √† 17:28
    function initializeTimer() {
        const timerElement = document.getElementById("timerCountdown");
        const timerButton = document.getElementById("timerButton");
        const timerLabel = document.getElementById("timerLabel");
        const video = document.getElementById(
            "masterclass-video",
        ) as HTMLVideoElement | null;

        if (!timerElement || !timerButton || !timerLabel || !video) return;

        const unlockTime = 17 * 60 + 28; // 17:28 en secondes (1048 secondes)
        let isUnlocked = false;

        const updateTimer = () => {
            if (isUnlocked) return;

            const currentVideoTime = video.currentTime || 0;
            const timeRemaining = Math.max(0, unlockTime - currentVideoTime);

            if (timeRemaining <= 0) {
                // D√©bloquer le bouton
                timerElement.textContent = "D√âBLOQU√â";
                timerButton.classList.remove("disabled");
                timerButton.classList.add("unlocked");
                timerButton.removeAttribute("disabled");
                timerLabel.textContent = "OFFRE DISPONIBLE";
                isUnlocked = true;

                // Ajouter le lien de redirection
                timerButton.addEventListener("click", () => {
                    window.location.href = "/offre-speciale";
                });
            } else {
                // Afficher le temps restant
                const minutes = Math.floor(timeRemaining / 60);
                const seconds = Math.floor(timeRemaining % 60);
                timerElement.textContent = `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
            }
        };

        // Mettre √† jour le timer √† chaque changement de temps de la vid√©o
        video.addEventListener("timeupdate", updateTimer);

        // Mise √† jour initiale
        updateTimer();
    }

    // Progress Bar functionality - Chapitres anim√©s
    function initializeProgressBar() {
        const chapters = document.querySelectorAll(".chapter");
        const chapterTimestamps = [
            0, // Intro
            39, // Mon exp√©rience
            138, // La preuve
            322, // Secret #1
            502, // Secret #2
            712, // Secret #3
            1011, // La solution
        ];

        const videoEl = document.getElementById(
            "masterclass-video",
        ) as HTMLVideoElement | null;
        if (!videoEl) return;

        function updateByTime(currentSecond: number) {
            chapterTimestamps.forEach((timestamp, index) => {
                const nextTimestamp =
                    chapterTimestamps[index + 1] ??
                    (videoEl!.duration || Number.POSITIVE_INFINITY);

                if (
                    currentSecond >= timestamp &&
                    currentSecond < nextTimestamp
                ) {
                    chapters[index]?.classList.add("active");
                    chapters[index]?.classList.remove("completed");

                    const chapterDuration = nextTimestamp - timestamp;
                    const chapterElapsed = currentSecond - timestamp;
                    const chapterProgress = Math.min(
                        (chapterElapsed / chapterDuration) * 100,
                        100,
                    );
                    const chapter = chapters[index] as HTMLElement;
                    if (chapter) {
                        chapter.style.setProperty(
                            "--chapter-progress",
                            `${chapterProgress}%`,
                        );
                    }
                } else if (currentSecond >= nextTimestamp) {
                    chapters[index]?.classList.remove("active");
                    chapters[index]?.classList.add("completed");
                    const chapter = chapters[index] as HTMLElement;
                    if (chapter) {
                        chapter.style.setProperty("--chapter-progress", "0%");
                    }
                } else {
                    chapters[index]?.classList.remove("active", "completed");
                    const chapter = chapters[index] as HTMLElement;
                    if (chapter) {
                        chapter.style.setProperty("--chapter-progress", "0%");
                    }
                }
            });
        }

        videoEl.addEventListener("timeupdate", () =>
            updateByTime(videoEl!.currentTime || 0),
        );
        videoEl.addEventListener("loadedmetadata", () => updateByTime(0));
    }

    // Floating reactions (disabled)
    function showFloatingReaction(emoji: string) {
        // Disabled for now
    }

    // CTA functions
    function closeCTA() {
        const popup = document.getElementById("ctaPopup");
        if (popup) {
            popup.classList.remove("show");
        }
    }

    function handleCTA() {
        alert("Fonctionnalit√© √† impl√©menter : capture email + t√©l√©chargement");
        closeCTA();
    }

    // Chapter navigation (seek video)
    let allowProgrammaticSeek = false;
    document.querySelectorAll(".chapter").forEach((chapter) => {
        chapter.addEventListener("click", () => {
            const time = parseInt((chapter as HTMLElement).dataset.time || "0");
            if (video) {
                allowProgrammaticSeek = true;
                video.currentTime = Math.max(0, time);
                // Optionally play
                if (video.paused) video.play();
                setTimeout(() => {
                    allowProgrammaticSeek = false;
                }, 150);
            }
        });
    });

    // --- Custom Video Controls ---
    const video = document.getElementById(
        "masterclass-video",
    ) as HTMLVideoElement | null;
    const wrapper = video?.parentElement as HTMLElement | null;
    const bigPlay = document.getElementById("bigPlay");
    const playPause = document.getElementById("playPause");
    const fullscreenBtn = document.getElementById("fullscreenBtn");

    function setPlayingState(isPlaying: boolean) {
        if (!wrapper) return;
        if (isPlaying) {
            wrapper.classList.add("is-playing");
            bigPlay?.classList.add("hidden");
        } else {
            wrapper.classList.remove("is-playing");
            bigPlay?.classList.remove("hidden");
        }
    }

    function togglePlay() {
        if (!video) return;
        if (video.paused) {
            video.play();
        } else {
            video.pause();
        }
    }

    // Prevent scrubbing: block seeking and keyboard skip

    if (video) {
        video.removeAttribute("controls");

        let lastTime = 0;

        bigPlay?.addEventListener("click", togglePlay);
        playPause?.addEventListener("click", togglePlay);
        video.addEventListener("click", togglePlay);

        video.addEventListener("play", () => setPlayingState(true));
        video.addEventListener("pause", () => setPlayingState(false));
        video.addEventListener("timeupdate", () => {
            lastTime = video.currentTime || 0;
        });
        video.addEventListener("seeking", () => {
            // Autoriser les seeks d√©clench√©s par les chapitres, bloquer le reste
            if (allowProgrammaticSeek) return;
            if (Math.abs((video.currentTime || 0) - lastTime) > 0.5) {
                video.currentTime = lastTime;
            }
        });
        video.addEventListener("loadedmetadata", () => {
            lastTime = 0;
        });

        // Block keyboard seeking when video focused
        (video as HTMLVideoElement).addEventListener(
            "keydown",
            (e: KeyboardEvent) => {
                const keysToBlock = [
                    "ArrowLeft",
                    "ArrowRight",
                    "Home",
                    "End",
                    "PageUp",
                    "PageDown",
                    "j",
                    "l",
                ];
                if (keysToBlock.includes(e.key)) {
                    e.preventDefault();
                    e.stopPropagation();
                }
            },
        );

        // Fullscreen functionality
        function updateFullscreenState() {
            if (!wrapper) return;
            const isFullscreen =
                document.fullscreenElement === wrapper ||
                (document as any).webkitFullscreenElement === wrapper ||
                (document as any).mozFullScreenElement === wrapper ||
                (document as any).msFullscreenElement === wrapper;

            if (isFullscreen) {
                wrapper.classList.add("is-fullscreen");
            } else {
                wrapper.classList.remove("is-fullscreen");
            }
        }

        function toggleFullscreen() {
            if (!wrapper) return;

            const isFullscreen =
                document.fullscreenElement === wrapper ||
                (document as any).webkitFullscreenElement === wrapper ||
                (document as any).mozFullScreenElement === wrapper ||
                (document as any).msFullscreenElement === wrapper;

            if (!isFullscreen) {
                // Entrer en plein √©cran
                if (wrapper.requestFullscreen) {
                    wrapper.requestFullscreen();
                } else if ((wrapper as any).webkitRequestFullscreen) {
                    (wrapper as any).webkitRequestFullscreen();
                } else if ((wrapper as any).mozRequestFullScreen) {
                    (wrapper as any).mozRequestFullScreen();
                } else if ((wrapper as any).msRequestFullscreen) {
                    (wrapper as any).msRequestFullscreen();
                }
            } else {
                // Sortir du plein √©cran
                if (document.exitFullscreen) {
                    document.exitFullscreen();
                } else if ((document as any).webkitExitFullscreen) {
                    (document as any).webkitExitFullscreen();
                } else if ((document as any).mozCancelFullScreen) {
                    (document as any).mozCancelFullScreen();
                } else if ((document as any).msExitFullscreen) {
                    (document as any).msExitFullscreen();
                }
            }
        }

        // √âcouter les √©v√©nements de changement de plein √©cran
        document.addEventListener("fullscreenchange", updateFullscreenState);
        document.addEventListener(
            "webkitfullscreenchange",
            updateFullscreenState,
        );
        document.addEventListener("mozfullscreenchange", updateFullscreenState);
        document.addEventListener("MSFullscreenChange", updateFullscreenState);

        // Ajouter l'√©v√©nement au bouton plein √©cran
        fullscreenBtn?.addEventListener("click", toggleFullscreen);
    }
</script>
