---
import Layout from "../layouts/Layout.astro";
import Footer from "../components/Footer.astro";
---

<Layout
	title="Syst√®me Viral - La m√©thode sans bullshit pour mon√©tiser vos contenus courts"
	description="Sans budget pub. Sans √©quipe. Sans bullshit. Juste un syst√®me qui transforme des vues TikTok en cash."
	canonical="/"
>
	<!-- Background effects -->
	<div class="gradient-bg"></div>

	<!-- Hero Section -->
	<section class="hero">
		<div class="container">
			<div class="hero-content">
				<div class="badge">
					<div class="badge-icon"></div>
					<span class="badge-text"
						>100k‚Ç¨ g√©n√©r√©s ‚Ä¢ M√©thode test√©e</span
					>
				</div>

				<h1>
					Je ne vais pas vous promettre 10k‚Ç¨/mois.
					<span class="gradient-text"
						>Mais j'ai fait +100k‚Ç¨ en 1 mois avec des vid√©os d'1
						minute.</span
					>
				</h1>

				<p class="hero-subtitle">
					Sans budget pub. Sans √©quipe. Sans bullshit.<br />
					Juste un syst√®me qui transforme des vues TikTok en cash.
				</p>

				<div class="cta-wrapper">
					<button class="cta-btn" onclick="openModal()">
						D√©couvrir la m√©thode ‚Üí
					</button>
				</div>

				<div class="trust-points">
					<div class="trust-item">
						<span class="trust-check">‚úì</span>
						<span>Pas de bullshit</span>
					</div>
					<div class="trust-item">
						<span class="trust-check">‚úì</span>
						<span>R√©sultats prouv√©s</span>
					</div>
					<div class="trust-item">
						<span class="trust-check">‚úì</span>
						<span>Syst√®me automatis√©</span>
					</div>
				</div>
			</div>
		</div>
	</section>

	<!-- Stats Section -->
	<section class="stats">
		<div class="container">
			<div class="stats-grid">
				<div class="stat-card">
					<div class="stat-number">+100k‚Ç¨</div>
					<div class="stat-desc">En 1 mois</div>
				</div>
				<div class="stat-card">
					<div class="stat-number">1min</div>
					<div class="stat-desc">Par vid√©o</div>
				</div>
				<div class="stat-card">
					<div class="stat-number">0‚Ç¨</div>
					<div class="stat-desc">Budget pub</div>
				</div>
			</div>
		</div>
	</section>

	<!-- Features Section -->
	<section class="features">
		<div class="container">
			<h2 class="section-title">Le syst√®me en 3 √©tapes</h2>

			<div class="features-grid">
				<div class="feature-card">
					<div class="step-number">1</div>
					<h3 class="feature-title">Cr√©er du contenu viral</h3>
					<p class="feature-text">
						Des vid√©os d'1 minute qui font des millions de vues.<br
						/>
						La formule exacte test√©e sur TikTok, Reels et Shorts.
					</p>
				</div>

				<div class="feature-card">
					<div class="step-number">2</div>
					<h3 class="feature-title">Capturer les emails</h3>
					<p class="feature-text">
						Transformer vos viewers en liste email qualifi√©e.<br />
						Syst√®me automatis√© qui tourne 24/7 sans vous.
					</p>
				</div>

				<div class="feature-card">
					<div class="step-number">3</div>
					<h3 class="feature-title">Mon√©tiser √† fond</h3>
					<p class="feature-text">
						Produit digital √† 2000‚Ç¨ ou affiliation premium.<br />
						La strat√©gie exacte pour faire +100k‚Ç¨/mois.
					</p>
				</div>
			</div>
		</div>
	</section>

	<!-- Popup Modal -->
	<div class="modal-overlay" id="modalOverlay">
		<div class="modal-content">
			<button class="modal-close" onclick="closeModal()">√ó</button>

			<div class="progress-bar">
				<div class="progress-step active" id="progress1"></div>
				<div class="progress-step" id="progress2"></div>
				<div class="progress-step" id="progress3"></div>
			</div>

			<form id="accessForm" onsubmit="handleSubmit(event)">
				<!-- Step 1: Name and Email -->
				<div class="form-step active" id="step1">
					<h3 class="modal-title">Acc√®s imm√©diat</h3>
					<p class="modal-subtitle">√âtape 1/3 - Vos informations</p>

					<div class="input-group">
						<label class="input-label">Pr√©nom</label>
						<input
							type="text"
							id="firstName"
							placeholder="John"
							required
						/>
					</div>

					<div class="input-group">
						<label class="input-label">Email</label>
						<input
							type="email"
							id="email"
							placeholder="john@exemple.com"
							required
						/>
					</div>

					<button
						type="button"
						class="form-button"
						onclick="nextStep()"
					>
						Continuer ‚Üí
					</button>
				</div>

				<!-- Step 2: Avatar Selection -->
				<div class="form-step hidden" id="step2">
					<h3 class="modal-title">Vous √™tes...</h3>
					<p class="modal-subtitle">
						√âtape 2/3 - Quel profil vous correspond ?
					</p>

					<div class="avatar-selection">
						<div
							class="avatar-option"
							onclick="selectAvatar('entrepreneur')"
							id="avatar-entrepreneur"
						>
							<div class="avatar-icon">üèÜ</div>
							<div class="avatar-content">
								<h4>L'Entrepreneur ambitieux</h4>
								<p>
									Tu fais d√©j√† du CA et veux scaler √† 10K‚Ç¨
									sans travailler plus
								</p>
							</div>
							<div class="avatar-radio"></div>
						</div>

						<div
							class="avatar-option"
							onclick="selectAvatar('influenceur')"
							id="avatar-influenceur"
						>
							<div class="avatar-icon">üì±</div>
							<div class="avatar-content">
								<h4>L'Influenceur √† 50K vues</h4>
								<p>
									Tu as 50K vues mais pas de ventes, tu veux
									mon√©tiser
								</p>
							</div>
							<div class="avatar-radio"></div>
						</div>

						<div
							class="avatar-option"
							onclick="selectAvatar('employe')"
							id="avatar-employe"
						>
							<div class="avatar-icon">üíº</div>
							<div class="avatar-content">
								<h4>L'Employ√© frustr√©</h4>
								<p>
									Tu d√©testes ton job et r√™ves de lancer ton
									business
								</p>
							</div>
							<div class="avatar-radio"></div>
						</div>
					</div>

					<button
						type="button"
						class="form-button"
						onclick="nextStep()"
						id="avatarNextBtn"
						disabled
					>
						Continuer ‚Üí
					</button>
				</div>

				<!-- Step 3: Phone -->
				<div class="form-step hidden" id="step3">
					<h3 class="modal-title">Une derni√®re √©tape</h3>
					<p class="modal-subtitle">
						√âtape 3/3 - Num√©ro de t√©l√©phone
					</p>

					<div class="input-group">
						<label class="input-label">T√©l√©phone</label>
						<input
							type="tel"
							id="phone"
							placeholder="Ton num√©ro de t√©l√©phone"
							required
						/>
					</div>

					<button type="submit" class="form-button" id="submitBtn">
						<span id="btnText">Acc√©der maintenant ‚Üí</span>
						<div class="hidden" id="loader">‚è≥</div>
					</button>
				</div>

				<!-- Success Message -->
				<div
					class="form-step hidden"
					id="successStep"
					style="text-align: center;"
				>
					<div style="font-size: 64px; margin-bottom: 24px;">‚úÖ</div>
					<h3 class="modal-title">Acc√®s confirm√© !</h3>
					<p class="modal-subtitle">
						Vous allez recevoir les d√©tails par email dans quelques
						instants.
					</p>
				</div>
			</form>
		</div>
	</div>

	<Footer />

	<!-- intl-tel-input CSS -->
	<link
		rel="stylesheet"
		href="https://cdn.jsdelivr.net/npm/intl-tel-input@18.2.1/build/css/intlTelInput.css"
	/>
	<!-- intl-tel-input JS -->
	<script
		src="https://cdn.jsdelivr.net/npm/intl-tel-input@18.2.1/build/js/intlTelInput.min.js"
	></script>

	<script>
		// Modal functions
		let audioContext;
		let openSoundStyle = "pop";
		function setOpenSoundStyle(style) {
			openSoundStyle = style;
		}
		function ensureAudio() {
			const AudioCtx = window.AudioContext || window.webkitAudioContext;
			if (!audioContext || audioContext.state === "closed")
				audioContext = new AudioCtx();
			if (audioContext.state === "suspended") audioContext.resume();
			return audioContext;
		}
		function playOpenSound(style = openSoundStyle) {
			try {
				const ctx = ensureAudio();
				const now = ctx.currentTime;
				if (style === "pop") {
					const duration = 0.25;
					const osc = ctx.createOscillator();
					const gain = ctx.createGain();
					osc.type = "sine";
					osc.frequency.setValueAtTime(880, now);
					osc.frequency.exponentialRampToValueAtTime(
						1320,
						now + 0.12,
					);
					osc.frequency.exponentialRampToValueAtTime(
						660,
						now + duration,
					);
					gain.gain.setValueAtTime(0.0001, now);
					gain.gain.linearRampToValueAtTime(0.18, now + 0.02);
					gain.gain.exponentialRampToValueAtTime(
						0.0001,
						now + duration,
					);
					osc.connect(gain);
					gain.connect(ctx.destination);
					osc.start(now);
					osc.stop(now + duration);
					return;
				}
				if (style === "blip") {
					const duration = 0.18;
					const osc = ctx.createOscillator();
					const gain = ctx.createGain();
					osc.type = "triangle";
					osc.frequency.setValueAtTime(1500, now);
					osc.frequency.exponentialRampToValueAtTime(
						600,
						now + duration,
					);
					gain.gain.setValueAtTime(0.0001, now);
					gain.gain.linearRampToValueAtTime(0.2, now + 0.02);
					gain.gain.exponentialRampToValueAtTime(
						0.0001,
						now + duration,
					);
					osc.connect(gain);
					gain.connect(ctx.destination);
					osc.start(now);
					osc.stop(now + duration);
					return;
				}
				if (style === "shimmer") {
					const duration = 0.3;
					const osc1 = ctx.createOscillator();
					const osc2 = ctx.createOscillator();
					const gain = ctx.createGain();
					osc1.type = "sine";
					osc2.type = "sine";
					osc1.frequency.setValueAtTime(880, now);
					osc2.frequency.setValueAtTime(1760, now);
					osc2.detune.setValueAtTime(10, now);
					gain.gain.setValueAtTime(0.0001, now);
					gain.gain.linearRampToValueAtTime(0.16, now + 0.03);
					gain.gain.exponentialRampToValueAtTime(
						0.0001,
						now + duration,
					);
					osc1.connect(gain);
					osc2.connect(gain);
					gain.connect(ctx.destination);
					osc1.start(now);
					osc2.start(now + 0.02);
					osc1.stop(now + duration);
					osc2.stop(now + duration);
					return;
				}
				if (style === "whoosh") {
					const duration = 0.25;
					const sampleRate = ctx.sampleRate;
					const frameCount = Math.floor(sampleRate * duration);
					const buffer = ctx.createBuffer(1, frameCount, sampleRate);
					const data = buffer.getChannelData(0);
					for (let i = 0; i < frameCount; i++)
						data[i] =
							(Math.random() * 2 - 1) * (1 - i / frameCount);
					const src = ctx.createBufferSource();
					src.buffer = buffer;
					const filter = ctx.createBiquadFilter();
					filter.type = "bandpass";
					filter.Q.value = 1;
					const gain = ctx.createGain();
					filter.frequency.setValueAtTime(500, now);
					filter.frequency.exponentialRampToValueAtTime(
						4000,
						now + duration,
					);
					gain.gain.setValueAtTime(0.0001, now);
					gain.gain.linearRampToValueAtTime(0.14, now + 0.03);
					gain.gain.exponentialRampToValueAtTime(
						0.0001,
						now + duration,
					);
					src.connect(filter);
					filter.connect(gain);
					gain.connect(ctx.destination);
					src.start(now);
					src.stop(now + duration);
					return;
				}
				playOpenSound("pop");
			} catch (e) {}
		}
		function openModal() {
			playOpenSound();
			document.getElementById("modalOverlay").classList.add("active");
			document.body.style.overflow = "hidden";
		}

		function closeModal() {
			document.getElementById("modalOverlay").classList.remove("active");
			document.body.style.overflow = "auto";
			// Reset form
			document.getElementById("accessForm").reset();
			selectedAvatar = null;
			document.getElementById("step1").classList.remove("hidden");
			document.getElementById("step2").classList.add("hidden");
			document.getElementById("step3").classList.add("hidden");
			document.getElementById("successStep").classList.add("hidden");
			document.getElementById("progress1").classList.add("active");
			document.getElementById("progress2").classList.remove("active");
			document.getElementById("progress3").classList.remove("active");
			// Reset avatar selection
			document.querySelectorAll(".avatar-option").forEach((option) => {
				option.classList.remove("selected");
			});
			document.getElementById("avatarNextBtn").disabled = true;

			// Reset country selector
			selectedCountryCode = "33";
			document.getElementById("selectedFlag").textContent = "üá´üá∑";
			document.querySelector(
				".selected-country .country-code",
			).textContent = "+33";
			document
				.getElementById("countryDropdown")
				.classList.remove("active");
		}

		// Close modal on overlay click
		document
			.getElementById("modalOverlay")
			.addEventListener("click", function (e) {
				if (e.target === this) {
					closeModal();
				}
			});

		// Form navigation
		let selectedAvatar = null;
		let selectedCountryCode = "33";

		function selectAvatar(avatar) {
			selectedAvatar = avatar;

			// Remove selected class from all avatars
			document.querySelectorAll(".avatar-option").forEach((option) => {
				option.classList.remove("selected");
			});

			// Add selected class to clicked avatar
			const avatarElement = document.getElementById(`avatar-${avatar}`);
			if (avatarElement) {
				avatarElement.classList.add("selected");
			}

			// Enable next button
			document.getElementById("avatarNextBtn").disabled = false;
		}

		// Initialize phone input when step 3 is shown
		function initPhoneInput() {
			const phoneInput = document.getElementById("phone");
			if (phoneInput && typeof window.intlTelInput !== "undefined") {
				window.iti = window.intlTelInput(phoneInput, {
					initialCountry: "auto",
					geoIpLookup: function (callback) {
						fetch("https://ipapi.co/json/")
							.then((res) => res.json())
							.then((data) => callback(data.country_code))
							.catch(() => callback("fr"));
					},
					preferredCountries: ["fr", "ch", "be", "ca"],
					separateDialCode: true,
					utilsScript:
						"https://cdn.jsdelivr.net/npm/intl-tel-input@18.2.1/build/js/utils.js",
				});
			}
		}

		// Store user data across steps
		let userData = {
			firstName: "",
			email: "",
			avatar: "",
		};

		async function nextStep() {
			const currentStep = document.querySelector(".form-step.active");
			const currentStepId = currentStep.id;

			if (currentStepId === "step1") {
				const firstName = document
					.getElementById("firstName")
					.value.trim();
				const email = document.getElementById("email").value.trim();

				if (!firstName || !email) {
					alert("Veuillez remplir tous les champs");
					return;
				}

				// Basic email validation
				const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
				if (!emailRegex.test(email)) {
					alert("Veuillez entrer un email valide");
					return;
				}

				// Store data
				userData.firstName = firstName;
				userData.email = email;

				try {
					// Send to MailerLite - Step 1
					const response = await fetch(
						"/.netlify/functions/subscribe",
						{
							method: "POST",
							headers: {
								"Content-Type": "application/json",
							},
							body: JSON.stringify({
								name: firstName,
								email: email,
								step: "1",
							}),
						},
					);

					const data = await response.json();

					if (!response.ok) {
						console.error("MailerLite Step 1 Error:", data);
						// Continue anyway to not block the user
					}

					console.log("Step 1 completed:", data);

					// Move to step 2
					const step1 = document.getElementById("step1");
					const step2 = document.getElementById("step2");
					step1.classList.remove("active");
					step1.classList.add("hidden");
					step2.classList.remove("hidden");
					step2.classList.add("active");
					document
						.getElementById("progress2")
						.classList.add("active");
				} catch (error) {
					console.error("Error in step 1:", error);
					// Continue to step 2 even if API fails
					const step1 = document.getElementById("step1");
					const step2 = document.getElementById("step2");
					step1.classList.remove("active");
					step1.classList.add("hidden");
					step2.classList.remove("hidden");
					step2.classList.add("active");
					document
						.getElementById("progress2")
						.classList.add("active");
				}
			} else if (currentStepId === "step2") {
				if (!selectedAvatar) {
					alert("Veuillez s√©lectionner un profil");
					return;
				}

				// Store avatar
				userData.avatar = selectedAvatar;

				try {
					// Send to MailerLite - Step 2
					const response = await fetch(
						"/.netlify/functions/subscribe",
						{
							method: "POST",
							headers: {
								"Content-Type": "application/json",
							},
							body: JSON.stringify({
								email: userData.email,
								avatar: selectedAvatar,
								step: "2",
							}),
						},
					);

					const data = await response.json();

					if (!response.ok) {
						console.error("MailerLite Step 2 Error:", data);
						// Continue anyway to not block the user
					}

					console.log("Step 2 completed:", data);

					// Move to step 3
					const step2 = document.getElementById("step2");
					const step3 = document.getElementById("step3");
					step2.classList.remove("active");
					step2.classList.add("hidden");
					step3.classList.remove("hidden");
					step3.classList.add("active");
					document
						.getElementById("progress3")
						.classList.add("active");

					// Initialize phone input when step 3 is shown
					setTimeout(function () {
						initPhoneInput();
					}, 100);
				} catch (error) {
					console.error("Error in step 2:", error);
					// Continue to step 3 even if API fails
					const step2 = document.getElementById("step2");
					const step3 = document.getElementById("step3");
					step2.classList.remove("active");
					step2.classList.add("hidden");
					step3.classList.remove("hidden");
					step3.classList.add("active");
					document
						.getElementById("progress3")
						.classList.add("active");

					setTimeout(function () {
						initPhoneInput();
					}, 100);
				}
			}
		}

		// Form submission
		async function handleSubmit(event) {
			event.preventDefault();

			const btnText = document.getElementById("btnText");
			const loader = document.getElementById("loader");
			const submitBtn = document.getElementById("submitBtn");

			// Validate phone number
			const phoneInput = document.getElementById("phone");
			if (!phoneInput || !phoneInput.value.trim()) {
				alert("Veuillez entrer votre num√©ro de t√©l√©phone");
				return;
			}

			if (window.iti && !window.iti.isValidNumber()) {
				alert("Veuillez entrer un num√©ro de t√©l√©phone valide");
				return;
			}

			// Show loading
			btnText.style.display = "none";
			loader.classList.remove("hidden");
			submitBtn.disabled = true;

			// Get formatted phone number
			let phoneNumber = "";
			if (window.iti) {
				phoneNumber = window.iti.getNumber(); // Get full international number like +41789482376
			} else {
				phoneNumber = phoneInput.value.trim();
			}

			console.log("Submitting with phone:", phoneNumber);

			try {
				// Send to MailerLite - Step 3 (Final)
				const response = await fetch("/.netlify/functions/subscribe", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({
						email: userData.email,
						phone: phoneNumber,
						step: "3",
					}),
				});

				const data = await response.json();

				if (!response.ok) {
					console.error("MailerLite Step 3 Error:", data);
					// Continue with success flow even if API fails
				}

				console.log("Step 3 completed:", data);

				// Show success
				document.getElementById("step3").classList.add("hidden");
				document
					.getElementById("successStep")
					.classList.remove("hidden");

				// Redirect to masterclass after success message
				setTimeout(() => {
					window.location.href =
						"https://systemeviral.com/100k-masterclass";
				}, 2500);
			} catch (error) {
				console.error("Error in step 3:", error);

				// Show success anyway and redirect
				document.getElementById("step3").classList.add("hidden");
				document
					.getElementById("successStep")
					.classList.remove("hidden");

				setTimeout(() => {
					window.location.href =
						"https://systemeviral.com/100k-masterclass";
				}, 2500);
			}
		}

		// Parallax on scroll
		window.addEventListener("scroll", () => {
			const scrolled = window.pageYOffset;
			const parallax = document.querySelector(".gradient-bg");
			if (parallax) {
				parallax.style.transform = `translateY(${scrolled * 0.5}px)`;
			}
		});

		// Animate numbers on scroll
		const animateValue = (element, start, end, duration) => {
			const startTimestamp = Date.now();
			const step = () => {
				const timestamp = Date.now();
				const progress = Math.min(
					(timestamp - startTimestamp) / duration,
					1,
				);
				const value = Math.floor(progress * (end - start) + start);

				if (element.textContent.includes("‚Ç¨")) {
					element.textContent = value.toLocaleString("fr-FR") + "k‚Ç¨";
				} else {
					element.textContent = value;
				}

				if (progress < 1) {
					window.requestAnimationFrame(step);
				}
			};
			window.requestAnimationFrame(step);
		};

		// Intersection observer for animations
		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					const statNumbers =
						entry.target.querySelectorAll(".stat-number");
					statNumbers.forEach((stat) => {
						if (stat.textContent === "+100k‚Ç¨") {
							animateValue(stat, 0, 100, 2000);
						}
					});
					observer.unobserve(entry.target);
				}
			});
		});

		document.querySelectorAll(".stats").forEach((section) => {
			observer.observe(section);
		});

		// Expose functions globally for inline onclick handlers
		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		(window as any).openModal = openModal;
		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		(window as any).closeModal = closeModal;
		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		(window as any).nextStep = nextStep;
		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		(window as any).selectAvatar = selectAvatar;
		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		(window as any).handleSubmit = handleSubmit;
		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		(window as any).setOpenSoundStyle = setOpenSoundStyle;
	</script>
</Layout>
